Question 4: Generic Stack with Indexer

using System;
using System.Collections.Generic;

public class Stack<T>
{
    private List<T> items = new List<T>();

    public void Push(T item)
    {
        items.Add(item);
    }

    public T Pop()
    {
        if (items.Count == 0)
            throw new InvalidOperationException("Stack is empty!");
        
        T value = items[items.Count - 1];
        items.RemoveAt(items.Count - 1);
        return value;
    }

    public T this[int index]
    {
        get
        {
            if (index < 0 || index >= items.Count)
                throw new IndexOutOfRangeException("Invalid index!");
            return items[index];
        }
    }

    public int Count
    {
        get { return items.Count; }
    }
}

class Program
{
    static void Main()
    {
        Stack<int> stack = new Stack<int>();
        stack.Push(10);
        stack.Push(20);
        stack.Push(30);

        Console.WriteLine(stack[0]);
        Console.WriteLine(stack[2]);

        Console.WriteLine(stack.Pop());
        Console.WriteLine(stack[stack.Count - 1]);
    }
}

Question 5: Generic Queue with Indexer

using System;
using System.Collections.Generic;

public class Queue<T>
{
    private List<T> items = new List<T>();

    public void Enqueue(T item)
    {
        items.Add(item);
    }

    public T Dequeue()
    {
        if (items.Count == 0)
            throw new InvalidOperationException("Queue is empty!");

        T value = items[0];
        items.RemoveAt(0);
        return value;
    }

    public T this[int index]
    {
        get
        {
            if (index < 0 || index >= items.Count)
                throw new IndexOutOfRangeException("Invalid index!");
            return items[index];
        }
    }

    public int Count
    {
        get { return items.Count; }
    }
}

class Program
{
    static void Main()
    {
        Queue<string> queue = new Queue<string>();
        queue.Enqueue("A");
        queue.Enqueue("B");
        queue.Enqueue("C");

        Console.WriteLine(queue[0]);
        Console.WriteLine(queue[2]);

        Console.WriteLine(queue.Dequeue());
        Console.WriteLine(queue[0]);
    }
}
